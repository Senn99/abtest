<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ss.abtest.mapper.FlightMapper">

    <insert id="addFlight" useGeneratedKeys="true" keyProperty="flightId" keyColumn="flight_id">
        insert into flight(company_id, name, status, traffic, layer_id, filter, owner_id, create_time, update_time)
        values (#{companyId}, #{name}, #{status}, #{traffic}, #{layerId}, #{filter}, #{ownerId}, #{createTime},
                #{update_time})
    </insert>
    <insert id="addVersion" useGeneratedKeys="true" keyProperty="versionId" keyColumn="version_id">
        insert into version(name, flight_id, config, create_time)
        values (#{name}, #{flight_id}, #{config}, #{createTime})
    </insert>
    <insert id="addFlightTraffic">
        insert into flight_traffic(flight_id, bucket, layer_id, create_time, update_time)
        values (#{flight_id}, #{bucket}, #{layer_id}, #{createTime}, #{updateTime})
    </insert>
    <insert id="addFlightUser">
        insert into flight_user(flight_id, user_id, position, create_time, update_time)
        values (#{flightId}, #{userId}, #{position}, #{createTime}, #{updateTime})
    </insert>
    <insert id="addFlightTestUser">
        insert into flight_test_user(flight_id, flow_content, create_time)
        values (#{flightId}, #{flowContent}, #{createTime})
    </insert>
    <update id="editFlightStatus">
        update flight
        set status = #{status}
        where flight_id = #{flight_id}
    </update>
    <update id="updateLayerTraffic">
        update layer
        set traffic = traffic + #{traffic}
        where layer_id = #{layer_id}
    </update>
    <update id="updateLayerTest">
        update layer set test = test + #{num} where layer_id = #{layerId}
    </update>
    <update id="updateFlightTraffic">
        update flight set traffic = #{traffic} where flight_id = #{flightId}
    </update>
    <delete id="deleteFlightTraffic">
        delete
        from flight_traffic
        where flight_id = #{flight_id}
    </delete>
    <select id="getLayerTraffic" resultType="java.lang.Integer">
        select bucket
        from flight_traffic
        where layer_id = #{layerId}
    </select>
    <select id="listFlightByCompanyId" resultType="com.ss.abtest.pojo.vo.FlightTable">
        SELECT f.flight_id   as flight_id,
               u.name        as owner_name,
               f.company_id  as company_id,
               f.name        as name,
               f.status      as status,
               f.create_time as create_time,
               f.update_time as update_time

        FROM (SELECT * FROM flight WHERE company_id = #{companyId}) AS f
                 LEFT JOIN USER AS u ON f.owner_id = u.user_id
            LIMIT #{page}
           , #{limit}
    </select>
    <select id="getLayerById" resultType="com.ss.abtest.pojo.domain.Layer">
        select *
        from layer
        where layer_id = #{id}
    </select>
    <select id="listFlightUserById" resultType="com.ss.abtest.pojo.vo.FlightUser">
        SELECT fu.flight_id AS flight_id,
               u.user_id    AS user_id,
               u.NAME       AS NAME,
               fu.position AS position
        FROM
            ( SELECT f.user_id AS user_id, f.flight_id AS flight_id, f.position as position FROM flight_user AS f WHERE f.flight_id = #{flightId} ) AS fu
            LEFT JOIN USER AS u
        ON fu.user_id = u.user_id;

    </select>
    <!--    <resultMap id="FlightUserMap" type="com.ss.abtest.pojo.vo.FlightUser">-->
    <!--        <result column="flight_id" property="flightId"/>-->
    <!--        <result column="position" property="position"/>-->
    <!--        <association property="user">-->
    <!--            <result column="user_id" property="userId"/>-->
    <!--            <result column="name" property="name"/>-->
    <!--        </association>-->
    <!--    </resultMap>-->

    <select id="getVersionByFlightId" resultType="com.ss.abtest.pojo.domain.Version">
        select *
        from version
        where flight_id = #{flightId};
    </select>
    <select id="listFlightTestUsers" resultType="com.ss.abtest.pojo.domain.FlightTestUser">
        select ftu.*
        from (select flight_id from flight where flight.layer_id = #{layerId} and flight.status = 1) as f
                 left join flight_test_user as ftu on f.flight_id = ftu.flight_id;
    </select>
    <select id="getFlightById" resultType="com.ss.abtest.pojo.domain.Flight">
        select *
        from flight
        where flight_id = #{flightId};
    </select>
    <select id="listFlight" resultType="com.ss.abtest.pojo.domain.Flight">
        select *
        from flight
        where status in (0, 1, 2, 3)
    </select>
    <select id="countFlightByCompanyId" resultType="java.lang.Integer">
        SELECT count(1)
        FROM (SELECT * FROM flight WHERE company_id = #{companyId}) AS f
                 LEFT JOIN USER AS u ON f.owner_id = u.user_id
    </select>
    <select id="listFlightTestUsersByFlightId" resultType="com.ss.abtest.pojo.domain.FlightTestUser">
        select *
        from flight_test_user
        where flight_id = #{flightId}
    </select>
    <select id="listVersionsByFlightId" resultType="com.ss.abtest.pojo.domain.Version">
        select *
        from version
        where flight_id = #{flightId}
    </select>
    <select id="listFlightWithFilter" resultType="com.ss.abtest.pojo.vo.FlightTable">
        SELECT f.flight_id as flight_id,
        u.name as owner_name,
        f.company_id as company_id,
        f.name as name,
        f.status as status,
        f.create_time as create_time,
        f.update_time as update_time
        FROM (SELECT * FROM flight WHERE company_id = #{companyId}
        <if test="filter!=null">
            ${filter}
        </if>
        ) AS f
        LEFT JOIN USER AS u ON f.owner_id = u.user_id
    </select>
</mapper>
